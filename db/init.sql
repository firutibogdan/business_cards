CREATE DATABASE CARDS;
USE CARDS;

DELIMITER //

DROP PROCEDURE IF EXISTS ADD_MSG //
CREATE PROCEDURE ADD_MSG (IN SRC VARCHAR(40), IN DST VARCHAR(40), IN MSSG VARCHAR(200))
BEGIN
	-- add message
	INSERT INTO MSGS (MSG, SOURCE, DESTINATION, TIME_OF_MSG) VALUES (MSSG, SRC, DST, NOW());
	COMMIT;
END //

DROP PROCEDURE IF EXISTS SHOW_LAST_MSGS //
CREATE PROCEDURE SHOW_LAST_MSGS(IN SRC VARCHAR(40), IN DST VARCHAR(40))
BEGIN
	-- show latest messages
	SELECT * FROM MSGS 
	WHERE (SOURCE = SRC AND DESTINATION = DST) OR (SOURCE = DST AND DESTINATION = SRC)
	ORDER BY TIME_OF_MSG DESC LIMIT 20;
END //

DROP PROCEDURE IF EXISTS SHOW_ALL_MSGS //
CREATE PROCEDURE SHOW_ALL_MSGS(IN SRC VARCHAR(40), IN DST VARCHAR(40))
BEGIN
	-- show all messages
	SELECT * FROM MSGS 
	WHERE (SOURCE = SRC AND DESTINATION = DST) OR (SOURCE = DST AND DESTINATION = SRC)
	ORDER BY TIME_OF_MSG DESC;
END //

DROP PROCEDURE IF EXISTS ADD_CITY //
CREATE PROCEDURE ADD_CITY (IN CITY_TO_ADD VARCHAR(20), IN COUNTRY_TO_ADD VARCHAR(20))
BEGIN
	DECLARE IS_CITY INT;
	DECLARE C_ID INT;

	-- check if city already present
	SELECT COUNT(*) INTO IS_CITY FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_TO_ADD);

	IF IS_CITY = 0 THEN
		-- add country
		CALL ADD_COUNTRY(COUNTRY_TO_ADD);

		-- get country id
		SELECT COUNTRY_ID INTO C_ID FROM COUNTRY WHERE LOWER(COUNTRY_NAME) = LOWER(COUNTRY_TO_ADD);

		-- add city
		INSERT INTO CITY (CITY_NAME, COUNTRY_ID) VALUES (CITY_TO_ADD, C_ID);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_COUNTRY //
CREATE PROCEDURE ADD_COUNTRY (IN COUNTRY_TO_ADD VARCHAR(20))
BEGIN
	DECLARE IS_COUNTRY INT;

	-- check if country already present
	SELECT COUNT(*) INTO IS_COUNTRY FROM COUNTRY WHERE LOWER(COUNTRY_NAME) = LOWER(COUNTRY_TO_ADD);

	IF IS_COUNTRY = 0 THEN
		-- add country
		INSERT INTO COUNTRY (COUNTRY_NAME) VALUES (COUNTRY_TO_ADD);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_JOB //
CREATE PROCEDURE ADD_JOB (IN JOB_TO_ADD VARCHAR(20))
BEGIN
	DECLARE IS_JOB INT;

	-- check if job already present
	SELECT COUNT(*) INTO IS_JOB FROM JOB WHERE LOWER(JOB_NAME) = LOWER(JOB_TO_ADD);

	IF IS_JOB = 0 THEN
		-- add job
		INSERT INTO JOB (JOB_NAME) VALUES (JOB_TO_ADD);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_DEPARTMENT //
CREATE PROCEDURE ADD_DEPARTMENT (IN DEPARTMENT_TO_ADD VARCHAR(20))
BEGIN
	DECLARE IS_DEPARTMENT INT;

	-- check if department already present
	SELECT COUNT(*) INTO IS_DEPARTMENT FROM DEPARTMENT WHERE LOWER(DEPARTMENT_NAME) = LOWER(DEPARTMENT_TO_ADD);

	IF IS_DEPARTMENT = 0 THEN
		-- add department
		INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES (DEPARTMENT_TO_ADD);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_DOMAIN //
CREATE PROCEDURE ADD_DOMAIN (IN DOMAIN_TO_ADD VARCHAR(20))
BEGIN
	DECLARE IS_DOMAIN INT;

	-- check if domain already present
	SELECT COUNT(*) INTO IS_DOMAIN FROM DOMAIN WHERE LOWER(DOMAIN_NAME) = LOWER(DOMAIN_TO_ADD);

	IF IS_DOMAIN = 0 THEN
		-- add domain
		INSERT INTO DOMAIN (DOMAIN_NAME) VALUES (DOMAIN_TO_ADD);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_COMPANY //
CREATE PROCEDURE ADD_COMPANY (IN COMPANY_NAME_TO_ADD VARCHAR(40), IN COMPANY_PHONE_TO_ADD VARCHAR(20), IN COMPANY_EMAIL_TO_ADD VARCHAR(60), 
	IN COMPANY_ADDRESS_TO_ADD VARCHAR(100), IN DOMAIN_NAME_TO_ADD VARCHAR(20), IN COUNTRY_NAME_TO_ADD VARCHAR(20), IN CITY_NAME_TO_ADD VARCHAR(20),
	IN LATIT FLOAT, IN LONGIT FLOAT)
BEGIN
	DECLARE IS_COMPANY INT;
	DECLARE COMP_DOM INT;
	DECLARE COMP_CITY INT;

	-- check if company already present
	SELECT COUNT(*) INTO IS_COMPANY FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(COMPANY_NAME_TO_ADD);

	IF IS_COMPANY = 0 THEN
		-- add domain
		CALL ADD_DOMAIN(DOMAIN_NAME_TO_ADD);

		-- add city
		CALL ADD_CITY(CITY_NAME_TO_ADD, COUNTRY_NAME_TO_ADD);

		-- get domain id and city id
		SELECT DOMAIN_ID INTO COMP_DOM FROM DOMAIN WHERE LOWER(DOMAIN_NAME) = LOWER(DOMAIN_NAME_TO_ADD);
		SELECT CITY_ID INTO COMP_CITY FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_NAME_TO_ADD);

		-- add company
		INSERT INTO COMPANY (COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_ID, CITY_ID, LATITUDE, LONGITUDE)
		VALUES (COMPANY_NAME_TO_ADD, COMPANY_PHONE_TO_ADD, COMPANY_EMAIL_TO_ADD, COMPANY_ADDRESS_TO_ADD, COMP_DOM, COMP_CITY, LATIT, LONGIT);
		COMMIT;
	END IF;
END //


DROP PROCEDURE IF EXISTS ADD_PERSON //
CREATE PROCEDURE ADD_PERSON (IN PERSON_NAME_TO_ADD VARCHAR(40), IN PERSON_SURNAME_TO_ADD VARCHAR(40), IN PERSON_PHONE_TO_ADD VARCHAR(20), 
	IN PERSON_EMAIL_TO_ADD VARCHAR(60), IN PERSON_PASSWORD_TO_ADD VARCHAR(100), IN PERSON_BIRTHDAY VARCHAR(20), IN COMPANY_NAME_TO_ADD VARCHAR(40),
	IN DEPARTMENT_NAME_TO_ADD VARCHAR(20), IN JOB_NAME_TO_ADD VARCHAR(20), IN COUNTRY_NAME_TO_ADD VARCHAR(20), IN CITY_NAME_TO_ADD VARCHAR(20))
BEGIN
	DECLARE PERSON_COMPANY INT;
	DECLARE PERSON_DEP INT;
	DECLARE PERSON_JOB INT;
	DECLARE PERSON_CITY INT;
	DECLARE IS_PERSON INT;

	-- check if person already present
	SELECT COUNT(*) INTO IS_PERSON FROM PERSON WHERE LOWER(PERSON_EMAIL_TO_ADD) = LOWER(PERSONAL_EMAIL);

	IF IS_PERSON = 0 THEN
		-- add department
		CALL ADD_DEPARTMENT(DEPARTMENT_NAME_TO_ADD);

		-- add job
		CALL ADD_JOB(JOB_NAME_TO_ADD);

		-- add city
		CALL ADD_CITY(CITY_NAME_TO_ADD, COUNTRY_NAME_TO_ADD);

		-- get company id, department id, job id, city id
		SELECT COMPANY_ID INTO PERSON_COMPANY FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(COMPANY_NAME_TO_ADD);
		SELECT DEPARTMENT_ID INTO PERSON_DEP FROM DEPARTMENT WHERE LOWER(DEPARTMENT_NAME) = LOWER(DEPARTMENT_NAME_TO_ADD);
		SELECT JOB_ID INTO PERSON_JOB FROM JOB WHERE LOWER(JOB_NAME) = LOWER(JOB_NAME_TO_ADD);
		SELECT CITY_ID INTO PERSON_CITY FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_NAME_TO_ADD);

		IF PERSON_COMPANY IS NOT NULL AND PERSON_DEP IS NOT NULL AND PERSON_JOB IS NOT NULL AND PERSON_CITY IS NOT NULL THEN
			-- add person
			INSERT INTO PERSON (PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, PERSONAL_PASSWORD, BIRTHDAY, COMPANY_ID, DEPARTMENT_ID, JOB_ID, CITY_ID)
				VALUES (PERSON_NAME_TO_ADD, PERSON_SURNAME_TO_ADD, PERSON_PHONE_TO_ADD, PERSON_EMAIL_TO_ADD, PERSON_PASSWORD_TO_ADD, str_to_date(PERSON_BIRTHDAY, '%Y-%m-%d'),
						PERSON_COMPANY, PERSON_DEP, PERSON_JOB, PERSON_CITY);
			COMMIT;
		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS UPDATE_PERSON //
CREATE PROCEDURE UPDATE_PERSON (IN OLD_EMAIL VARCHAR(60), IN PERSON_NAME_TO_ADD VARCHAR(40), IN PERSON_SURNAME_TO_ADD VARCHAR(40), IN PERSON_PHONE_TO_ADD VARCHAR(20), 
	IN PERSON_EMAIL_TO_ADD VARCHAR(60), IN PERSON_PASSWORD_TO_ADD VARCHAR(100), IN PERSON_BIRTHDAY VARCHAR(20), IN COMPANY_NAME_TO_ADD VARCHAR(40),
	IN DEPARTMENT_NAME_TO_ADD VARCHAR(20), IN JOB_NAME_TO_ADD VARCHAR(20), IN COUNTRY_NAME_TO_ADD VARCHAR(20), IN CITY_NAME_TO_ADD VARCHAR(20))
BEGIN
	DECLARE PERSON_COMPANY INT;
	DECLARE PERSON_DEP INT;
	DECLARE PERSON_JOB INT;
	DECLARE PERSON_CITY INT;
	DECLARE IS_PRESENT INT;
	DECLARE P_ID INT;

	-- check if person already in database
	SELECT COUNT(*) INTO IS_PRESENT FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(OLD_EMAIL);

	IF IS_PRESENT != 0 THEN
		SELECT PERSON_ID INTO P_ID FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(OLD_EMAIL);

		-- add department
		CALL ADD_DEPARTMENT(DEPARTMENT_NAME_TO_ADD);

		-- add job
		CALL ADD_JOB(JOB_NAME_TO_ADD);

		-- add city
		CALL ADD_CITY(CITY_NAME_TO_ADD, COUNTRY_NAME_TO_ADD);

		-- add company
		CALL ADD_COMPANY (COMPANY_NAME_TO_ADD, '0000-000-000', 'No info available', 'No info available', 'No info available', 'No info available', 'No info available');

		-- get company id, department id, job id, city id
		SELECT COMPANY_ID INTO PERSON_COMPANY FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(COMPANY_NAME_TO_ADD);
		SELECT DEPARTMENT_ID INTO PERSON_DEP FROM DEPARTMENT WHERE LOWER(DEPARTMENT_NAME) = LOWER(DEPARTMENT_NAME_TO_ADD);
		SELECT JOB_ID INTO PERSON_JOB FROM JOB WHERE LOWER(JOB_NAME) = LOWER(JOB_NAME_TO_ADD);
		SELECT CITY_ID INTO PERSON_CITY FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_NAME_TO_ADD);

		IF PERSON_COMPANY IS NOT NULL AND PERSON_DEP IS NOT NULL AND PERSON_JOB IS NOT NULL AND PERSON_CITY IS NOT NULL THEN
			-- update info
			UPDATE PERSON
			SET PERSON_NAME = PERSON_NAME_TO_ADD,
				PERSON_SURNAME = PERSON_SURNAME_TO_ADD,
				PERSONAL_PHONE = PERSON_PHONE_TO_ADD,
				PERSONAL_EMAIL = PERSON_EMAIL_TO_ADD,
				PERSONAL_PASSWORD = PERSON_PASSWORD_TO_ADD,
				BIRTHDAY = str_to_date(PERSON_BIRTHDAY, '%Y-%m-%d'),
				COMPANY_ID = PERSON_COMPANY,
				DEPARTMENT_ID = PERSON_DEP,
				JOB_ID = PERSON_JOB,
				CITY_ID = PERSON_CITY
			WHERE PERSON_ID = P_ID;
			COMMIT;
		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS UPDATE_PERSON_NO_PASS //
CREATE PROCEDURE UPDATE_PERSON_NO_PASS (IN OLD_EMAIL VARCHAR(60), IN PERSON_NAME_TO_ADD VARCHAR(40), IN PERSON_SURNAME_TO_ADD VARCHAR(40), IN PERSON_PHONE_TO_ADD VARCHAR(20), 
	IN PERSON_EMAIL_TO_ADD VARCHAR(60), IN PERSON_BIRTHDAY VARCHAR(20), IN COMPANY_NAME_TO_ADD VARCHAR(40),
	IN DEPARTMENT_NAME_TO_ADD VARCHAR(20), IN JOB_NAME_TO_ADD VARCHAR(20), IN COUNTRY_NAME_TO_ADD VARCHAR(20), IN CITY_NAME_TO_ADD VARCHAR(20))
BEGIN
	DECLARE PERSON_COMPANY INT;
	DECLARE PERSON_DEP INT;
	DECLARE PERSON_JOB INT;
	DECLARE PERSON_CITY INT;
	DECLARE IS_PRESENT INT;
	DECLARE P_ID INT;

	-- check if person already in database
	SELECT COUNT(*) INTO IS_PRESENT FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(OLD_EMAIL);

	IF IS_PRESENT != 0 THEN
		SELECT PERSON_ID INTO P_ID FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(OLD_EMAIL);

		-- add department
		CALL ADD_DEPARTMENT(DEPARTMENT_NAME_TO_ADD);

		-- add job
		CALL ADD_JOB(JOB_NAME_TO_ADD);

		-- add city
		CALL ADD_CITY(CITY_NAME_TO_ADD, COUNTRY_NAME_TO_ADD);

		-- add company
		CALL ADD_COMPANY (COMPANY_NAME_TO_ADD, '0000-000-000', 'No info available', 'No info available', 'No info available', 'No info available', 'No info available');

		-- get company id, department id, job id, city id
		SELECT COMPANY_ID INTO PERSON_COMPANY FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(COMPANY_NAME_TO_ADD);
		SELECT DEPARTMENT_ID INTO PERSON_DEP FROM DEPARTMENT WHERE LOWER(DEPARTMENT_NAME) = LOWER(DEPARTMENT_NAME_TO_ADD);
		SELECT JOB_ID INTO PERSON_JOB FROM JOB WHERE LOWER(JOB_NAME) = LOWER(JOB_NAME_TO_ADD);
		SELECT CITY_ID INTO PERSON_CITY FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_NAME_TO_ADD);

		IF PERSON_COMPANY IS NOT NULL AND PERSON_DEP IS NOT NULL AND PERSON_JOB IS NOT NULL AND PERSON_CITY IS NOT NULL THEN
			-- update info
			UPDATE PERSON
			SET PERSON_NAME = PERSON_NAME_TO_ADD,
				PERSON_SURNAME = PERSON_SURNAME_TO_ADD,
				PERSONAL_PHONE = PERSON_PHONE_TO_ADD,
				PERSONAL_EMAIL = PERSON_EMAIL_TO_ADD,
				BIRTHDAY = str_to_date(PERSON_BIRTHDAY, '%Y-%m-%d'),
				COMPANY_ID = PERSON_COMPANY,
				DEPARTMENT_ID = PERSON_DEP,
				JOB_ID = PERSON_JOB,
				CITY_ID = PERSON_CITY
			WHERE PERSON_ID = P_ID;
			COMMIT;
		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS UPDATE_COMPANY //
CREATE PROCEDURE UPDATE_COMPANY (IN OLD_NAME VARCHAR(40), IN COMPANY_NAME_TO_ADD VARCHAR(40), IN COMPANY_PHONE_TO_ADD VARCHAR(20), IN COMPANY_EMAIL_TO_ADD VARCHAR(60), 
	IN COMPANY_ADDRESS_TO_ADD VARCHAR(100), IN DOMAIN_NAME_TO_ADD VARCHAR(20), IN COUNTRY_NAME_TO_ADD VARCHAR(20), IN CITY_NAME_TO_ADD VARCHAR(20))
BEGIN
	DECLARE COMPANY_DOMAIN_ID INT;
	DECLARE COMPANY_CITY_ID INT;
	DECLARE IS_PRESENT INT;
	DECLARE C_ID INT;

	-- check if company already in database
	SELECT COUNT(*) INTO IS_PRESENT FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(OLD_NAME);

	IF IS_PRESENT != 0 THEN
		SELECT COMPANY_ID INTO C_ID FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(OLD_NAME);

		-- add domain
		CALL ADD_DOMAIN(DOMAIN_NAME_TO_ADD);

		-- add city
		CALL ADD_CITY(CITY_NAME_TO_ADD, COUNTRY_NAME_TO_ADD);

		-- get domain id, city id
		SELECT DOMAIN_ID INTO COMPANY_DOMAIN_ID FROM DOMAIN WHERE LOWER(DOMAIN_NAME) = LOWER(DOMAIN_NAME_TO_ADD);
		SELECT CITY_ID INTO COMPANY_CITY_ID FROM CITY WHERE LOWER(CITY_NAME) = LOWER(CITY_NAME_TO_ADD);

		IF COMPANY_DOMAIN_ID IS NOT NULL AND COMPANY_CITY_ID IS NOT NULL THEN
			-- update info
			UPDATE COMPANY
			SET COMPANY_NAME = COMPANY_NAME_TO_ADD,
				COMPANY_PHONE = COMPANY_PHONE_TO_ADD,
				COMPANY_EMAIL = COMPANY_EMAIL_TO_ADD,
				COMPANY_ADDRESS = COMPANY_ADDRESS_TO_ADD,
				DOMAIN_ID = COMPANY_DOMAIN_ID,
				CITY_ID = COMPANY_CITY_ID
			WHERE COMPANY_ID = C_ID;
			COMMIT;
		END IF;
	END IF;
END //


DROP PROCEDURE IF EXISTS DELETE_BY_EMAIL //
CREATE PROCEDURE DELETE_BY_EMAIL (IN OLD_EMAIL VARCHAR(60))
BEGIN
	-- delete person by email
	DELETE FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(OLD_EMAIL);
	COMMIT;
END //


DROP PROCEDURE IF EXISTS DELETE_COMPANY_BY_NAME //
CREATE PROCEDURE DELETE_COMPANY_BY_NAME (IN OLD_NAME VARCHAR(60))
BEGIN
	DECLARE EMPLOYEES INT;
	DECLARE C_ID INT;

	-- get company id
	SELECT COMPANY_ID INTO C_ID FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(OLD_NAME);

	IF C_ID IS NOT NULL THEN
		-- get number of employees
		SELECT COUNT(*) INTO EMPLOYEES FROM PERSON WHERE COMPANY_ID = C_ID;

		IF EMPLOYEES = 0 THEN
			-- can be deleted only if number of employees is 0
			DELETE FROM COMPANY WHERE LOWER(COMPANY_NAME) = LOWER(OLD_NAME);
			COMMIT;
		END IF;
	END IF;	
END //


DROP PROCEDURE IF EXISTS CHECK_EMAIL //
CREATE PROCEDURE CHECK_EMAIL(IN OLD_EMAIL VARCHAR(60))
BEGIN
	-- check if email exists
	SELECT COUNT(*) FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = OLD_EMAIL;
END //


DROP PROCEDURE IF EXISTS CHECK_COMPANY_NAME //
CREATE PROCEDURE CHECK_COMPANY_NAME(IN OLD_NAME VARCHAR(40))
BEGIN
	-- check if company exists
	SELECT COUNT(*) FROM COMPANY WHERE LOWER(COMPANY_NAME) = OLD_NAME;
END //


DROP PROCEDURE IF EXISTS SEARCH_BY_NAME //
CREATE PROCEDURE SEARCH_BY_NAME(IN PERSON_NAME_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from PERSON filtered by name
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(PERSON_NAME) LIKE CONCAT('%', LOWER(PERSON_NAME_TO_SEARCH), '%')  OR LOWER(PERSON_SURNAME) LIKE CONCAT('%', LOWER(PERSON_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_BY_EMAIL //
CREATE PROCEDURE SEARCH_BY_EMAIL(IN PERSON_EMAIL_TO_SEARCH VARCHAR(60))
BEGIN
	-- get records from PERSON filtered by email
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, PERSONAL_PASSWORD, BIRTHDAY, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(PERSONAL_EMAIL) = LOWER(PERSON_EMAIL_TO_SEARCH);
END //


DROP PROCEDURE IF EXISTS SEARCH_BY_COMPANY //
CREATE PROCEDURE SEARCH_BY_COMPANY(IN COMPANY_NAME_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from PERSON filtered by company name
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(COMPANY_NAME) LIKE CONCAT('%', LOWER(COMPANY_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_BY_CITY //
CREATE PROCEDURE SEARCH_BY_CITY(IN CITY_NAME_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from PERSON filtered by city
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(CITY_NAME) LIKE CONCAT('%', LOWER(CITY_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_BY_JOB //
CREATE PROCEDURE SEARCH_BY_JOB(IN JOB_NAME_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from PERSON filtered by job
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(JOB_NAME) LIKE CONCAT('%', LOWER(JOB_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_ALL_COMPANIES //
CREATE PROCEDURE SEARCH_ALL_COMPANIES()
BEGIN
	-- get all records from COMPANY
	SELECT COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME
	FROM COMPANY
	INNER JOIN DOMAIN
	ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	INNER JOIN CITY
	ON COMPANY.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	ORDER BY COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME;
END //


DROP PROCEDURE IF EXISTS SEARCH_COMPANY_BY_NAME //
CREATE PROCEDURE SEARCH_COMPANY_BY_NAME(IN COMPANY_NAME_TO_SEARCH VARCHAR(40))
BEGIN
	-- get records from COMPANY filtered by name
	SELECT COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME
	FROM COMPANY
	INNER JOIN DOMAIN
	ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	INNER JOIN CITY
	ON COMPANY.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(COMPANY_NAME) LIKE CONCAT('%', LOWER(COMPANY_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_COMPANY_BY_NAME_PLUS //
CREATE PROCEDURE SEARCH_COMPANY_BY_NAME_PLUS(IN COMPANY_NAME_TO_SEARCH VARCHAR(40))
BEGIN
	-- get records from COMPANY filtered by name
	SELECT COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME, LATITUDE, LONGITUDE
	FROM COMPANY
	INNER JOIN DOMAIN
	ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	INNER JOIN CITY
	ON COMPANY.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(COMPANY_NAME) LIKE CONCAT('%', LOWER(COMPANY_NAME_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_COMPANY_BY_DOMAIN //
CREATE PROCEDURE SEARCH_COMPANY_BY_DOMAIN(IN COMPANY_DOMAIN_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from COMPANY filtered by domain
	SELECT COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME
	FROM COMPANY
	INNER JOIN DOMAIN
	ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	INNER JOIN CITY
	ON COMPANY.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(DOMAIN_NAME) LIKE CONCAT('%', LOWER(COMPANY_DOMAIN_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_COMPANY_BY_CITY //
CREATE PROCEDURE SEARCH_COMPANY_BY_CITY(IN COMPANY_CITY_TO_SEARCH VARCHAR(20))
BEGIN
	-- get records from COMPANY filtered by city
	SELECT COMPANY_NAME, COMPANY_PHONE, COMPANY_EMAIL, COMPANY_ADDRESS, DOMAIN_NAME, CITY_NAME, COUNTRY_NAME
	FROM COMPANY
	INNER JOIN DOMAIN
	ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	INNER JOIN CITY
	ON COMPANY.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	WHERE LOWER(CITY_NAME) LIKE CONCAT('%', LOWER(COMPANY_CITY_TO_SEARCH), '%');
END //


DROP PROCEDURE IF EXISTS SEARCH_ALL //
CREATE PROCEDURE SEARCH_ALL()
BEGIN
	-- get all records from PERSON
	SELECT PERSON_NAME, PERSON_SURNAME, PERSONAL_PHONE, PERSONAL_EMAIL, JOB_NAME, DEPARTMENT_NAME, COMPANY_NAME, CITY_NAME, COUNTRY_NAME
	FROM PERSON
	INNER JOIN COMPANY
	ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	ORDER BY COMPANY_NAME, PERSON_NAME, PERSON_SURNAME, JOB_NAME, DEPARTMENT_NAME, CITY_NAME, COUNTRY_NAME, PERSONAL_PHONE, PERSONAL_EMAIL;
END //


DROP PROCEDURE IF EXISTS SHOW_LOGS //
CREATE PROCEDURE SHOW_LOGS()
BEGIN
	-- show all logs
	SELECT * FROM LOGS;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_CITY //
CREATE PROCEDURE GROUP_BY_CITY ()
BEGIN
	-- get all records groupped by city
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, CITY_NAME
	FROM PERSON
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	GROUP BY CITY_NAME;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_COUNTRY //
CREATE PROCEDURE GROUP_BY_COUNTRY ()
BEGIN
	-- get all records groupped by country
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, COUNTRY_NAME
	FROM PERSON
	INNER JOIN CITY
	ON PERSON.CITY_ID = CITY.CITY_ID
	INNER JOIN COUNTRY
	ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
	GROUP BY COUNTRY_NAME;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_JOB //
CREATE PROCEDURE GROUP_BY_JOB ()
BEGIN
	-- get all records groupped by job
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, JOB_NAME
	FROM PERSON
	INNER JOIN JOB
	ON PERSON.JOB_ID = JOB.JOB_ID
	GROUP BY JOB_NAME;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_DEPARTMENT //
CREATE PROCEDURE GROUP_BY_DEPARTMENT ()
BEGIN
	-- get all records groupped by department
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, DEPARTMENT_NAME
	FROM PERSON
	INNER JOIN DEPARTMENT
	ON PERSON.DEPARTMENT_ID = DEPARTMENT.DEPARTMENT_ID
	GROUP BY DEPARTMENT_NAME;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_DOMAIN //
CREATE PROCEDURE GROUP_BY_DOMAIN ()
BEGIN
	-- get all records groupped by domain
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, DOMAIN_NAME
	FROM PERSON
	INNER JOIN COMPANY ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	INNER JOIN DOMAIN ON COMPANY.DOMAIN_ID = DOMAIN.DOMAIN_ID
	GROUP BY DOMAIN_NAME;
END //


DROP PROCEDURE IF EXISTS GROUP_BY_COMPANY //
CREATE PROCEDURE GROUP_BY_COMPANY ()
BEGIN
	-- get all records groupped by company name
	SELECT COUNT(*) AS NUMBER_OF_PERSONS, COMPANY_NAME
	FROM PERSON
	INNER JOIN COMPANY ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
	GROUP BY COMPANY_NAME;
END //


DROP PROCEDURE IF EXISTS LOGIN_USER //
CREATE PROCEDURE LOGIN_USER (USER_EMAIL_TO_CHECK VARCHAR(60), USER_PASSWORD_TO_CHECK VARCHAR(100))
BEGIN
	-- check if username and password match
	SELECT COUNT(*) FROM PERSON WHERE LOWER(PERSONAL_EMAIL) = LOWER(USER_EMAIL_TO_CHECK) AND PERSONAL_PASSWORD = USER_PASSWORD_TO_CHECK;
END //


DROP FUNCTION IF EXISTS OTHER_CITY //
CREATE FUNCTION OTHER_CITY ()
	RETURNS FLOAT
BEGIN
	DECLARE RET FLOAT;

	-- get percent of persons whose city is different than company city
	SELECT (SELECT COUNT(*)
			FROM PERSON
			INNER JOIN COMPANY
			ON PERSON.COMPANY_ID = COMPANY.COMPANY_ID
			WHERE PERSON.CITY_ID != COMPANY.CITY_ID) / (SELECT COUNT(*) FROM PERSON) * 100 INTO RET;

	RETURN RET;
END //

DROP FUNCTION IF EXISTS OTHER_COUNTRY //
CREATE FUNCTION OTHER_COUNTRY ()
	RETURNS FLOAT
BEGIN
	DECLARE RET FLOAT;

	-- get percent of persons whose country is not ROMANIA
	SELECT (SELECT COUNT(*)
			FROM PERSON
			INNER JOIN CITY
			ON PERSON.CITY_ID = CITY.CITY_ID
			INNER JOIN COUNTRY
			ON CITY.COUNTRY_ID = COUNTRY.COUNTRY_ID
			WHERE LOWER(COUNTRY_NAME) != LOWER('ROMANIA')) / (SELECT COUNT(*) FROM PERSON) * 100 INTO RET;

	RETURN RET;
END //

DELIMITER ;

-- tables
CREATE TABLE DOMAIN(
	DOMAIN_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	DOMAIN_NAME VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE DEPARTMENT(
	DEPARTMENT_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	DEPARTMENT_NAME VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE JOB(
	JOB_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	JOB_NAME VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE COUNTRY(
	COUNTRY_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	COUNTRY_NAME VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE CITY(
	CITY_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	CITY_NAME VARCHAR(20) NOT NULL UNIQUE,
	CITY_POPULATION INT,
	CITY_AVAILABLE_JOBS INT,
	COUNTRY_ID INT,
	FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY(COUNTRY_ID)
);

CREATE TABLE COMPANY(
	COMPANY_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	COMPANY_NAME VARCHAR(40) NOT NULL UNIQUE,
	COMPANY_PHONE VARCHAR(20) NOT NULL,
	COMPANY_EMAIL VARCHAR(60) NOT NULL,
	COMPANY_ADDRESS VARCHAR(100) NOT NULL,
	DOMAIN_ID INT,
	CITY_ID INT,
	LATITUDE FLOAT(10, 6) NOT NULL,
	LONGITUDE FLOAT(10, 6) NOT NULL,
	FOREIGN KEY (DOMAIN_ID) REFERENCES DOMAIN(DOMAIN_ID),
	FOREIGN KEY (CITY_ID) REFERENCES CITY(CITY_ID)
);


CREATE TABLE PERSON(
	PERSON_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	PERSON_NAME VARCHAR(40) NOT NULL,
	PERSON_SURNAME VARCHAR(40) NOT NULL,
	PERSONAL_PHONE VARCHAR(20) NOT NULL,
	PERSONAL_EMAIL VARCHAR(60) NOT NULL UNIQUE,
	PERSONAL_PASSWORD VARCHAR(100) NOT NULL,
	BIRTHDAY DATE,
	COMPANY_ID INT,
	DEPARTMENT_ID INT,
	JOB_ID INT,
	CITY_ID INT,
	FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(COMPANY_ID),
	FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(DEPARTMENT_ID),
	FOREIGN KEY (JOB_ID) REFERENCES JOB(JOB_ID),
	FOREIGN KEY (CITY_ID) REFERENCES CITY(CITY_ID)
);


CREATE TABLE LOGS(
	PERSON_NAME VARCHAR(40) NOT NULL,
	PERSON_SURNAME VARCHAR(40) NOT NULL,
	USERNAME VARCHAR(60) NOT NULL,
	ACTIVITY VARCHAR(20) NOT NULL,
	LTIME DATE NOT NULL
);

CREATE TABLE MSGS(
	MSG_ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	MSG VARCHAR(200) NOT NULL,
	SOURCE VARCHAR(40) NOT NULL,
	DESTINATION VARCHAR(40) NOT NULL,
	TIME_OF_MSG TIMESTAMP NOT NULL
);

DELIMITER //

DROP TRIGGER IF EXISTS ADD_LOG_NEW_PERSON //
CREATE TRIGGER ADD_LOG_NEW_PERSON
    AFTER INSERT ON PERSON
    FOR EACH ROW 
BEGIN
	-- create log message on account creation
    INSERT INTO LOGS (PERSON_NAME, PERSON_SURNAME, USERNAME, ACTIVITY, LTIME)
	VALUES (NEW.PERSON_NAME, NEW.PERSON_SURNAME, NEW.PERSONAL_EMAIL, 'Created new account.', NOW());
END //


DROP TRIGGER IF EXISTS ADD_LOG_DEL_PERSON //
CREATE TRIGGER ADD_LOG_DEL_PERSON
    BEFORE DELETE ON PERSON
    FOR EACH ROW 
BEGIN
-- create log message on account deletion
    INSERT INTO LOGS (PERSON_NAME, PERSON_SURNAME, USERNAME, ACTIVITY, LTIME)
	VALUES (OLD.PERSON_NAME, OLD.PERSON_SURNAME, OLD.PERSONAL_EMAIL, 'Deleted account.', NOW());
END //

DELIMITER ;

call ADD_MSG('mihai.popescu@yahoo.com', 'dadelina@yahoo.com', 'Buna! Ce mai faci?');
call ADD_COMPANY('ITSecBF', '0742-422-346', 'hr@itsecbf.com', 'Str. Dorobanti, Nr. 44', 'Internet Security', 'Romania', 'Bucharest', 44.437019, 26.086546);
call ADD_COMPANY('FlowerRose', '0742-422-333', 'hr@flowerrose.com', 'Str. Anghel Petru, Nr. 21', 'Agriculture', 'Romania', 'Cluj-Napoca', 46.775389, 23.607987);
call ADD_COMPANY('Regio', '0742-422-297', 'apa@regio.com', 'Str. Geneva, Nr. 124', 'Water Provider', 'Romania', 'Bucharest', 44.440619, 26.082736);
call ADD_COMPANY('GasBack', '0743-322-546', 'gas@back.com', 'Str. Aluminiului, Nr. 21', 'Gas', 'Romania', 'Bucharest', 44.435763, 26.111755);
call ADD_COMPANY('FoodFood', '0729-395-283', 'hr@foodfood.com', 'Str. Mircea Bades, Nr. 1', 'Food', 'Romania', 'Iasi', 47.159092, 27.615032);
call ADD_COMPANY('BricoHouse', '0711-432-229', 'brico@brico.com', 'Str. Gargaritei, Nr. 29', 'House', 'Romania', 'Bucharest', 44.443971, 26.138219);
call ADD_COMPANY('PubliciTaT', '0763-123-334', 'pub@pub.com', 'Str. Alioanei, Nr. 95', 'Publiciy', 'Romania', 'Targu Mures', 46.542835, 24.573699);
call ADD_COMPANY('FlowerPot', '0712-234-558', 'pr@flowerpot.com', 'Str. Petru Rares, Nr. 139', 'Agriculture', 'Romania', 'Craiova', 44.316589, 23.819930);
call ADD_COMPANY('SmartPhone', '0722-199-349', 'smart@smartphone.com', 'Drumul Sarii, Nr. 9', 'Mobile Phones', 'Romania', 'Arad', 46.180103, 21.304070);
call ADD_COMPANY('MichaMich', '0744-542-330', 'micha@michamich.com', 'Bulevardul Revolutiei, Nr. 279', 'Hypermarket', 'Spain', 'Barcelona', 41.386158, 2.149816);
call ADD_PERSON('Popescu', 'George', '0744-204-589', 'george.popescu@yahoo.com', '8db344f61fddd300e937855313a54a71eb0ec87f863f5c1ac274b34d7c83d4b6', '1999-05-08', 'ITSecBF', 'IT', 'Junior Programmer', 'Romania', 'Bucharest');
call ADD_PERSON('Popescu', 'Mihai', '0744-204-588', 'mihai.popescu@yahoo.com', 'c48368f3b3e2217d5d2832adb6762268b8b1ed9aad0691f3e75f918b86feccdd', '1999-05-07', 'ITSecBF', 'IT', 'Junior Programmer', 'Romania', 'Timisoara');
call ADD_PERSON('Popescu', 'Ion', '0744-204-587', 'ion.popescu@yahoo.com', 'c3e6a4a334c4bdb20d3e28ff0300d9659bb7f659e3c6911a073514a899b23feb', '1999-05-06', 'ITSecBF', 'IT', 'Junior Programmer', 'Romania', 'Timisoara');
call ADD_PERSON('Mircea', 'Gheorghe', '0744-234-187', 'mircea.gheorghe@yahoo.com', 'a454d6cefc04661686e7110c7689e55513d4ae5c33bc13bc0a008a03b47b0830', '1992-12-03', 'FlowerRose', 'Sales', 'Shop Assistant', 'Romania', 'Cluj');
call ADD_PERSON('Fracu', 'Mihai', '0724-304-187', 'mihai.fracu@yahoo.com', '0149d8308f32a3bb12137d5cc710afa9d1815e1a99c37da31bf2de1fb0fabf83', '1991-04-02', 'FlowerRose', 'IT', 'Database Keeper', 'Romania', 'Cluj');
call ADD_PERSON('Mica', 'Alina', '0722-219-483', 'micaalin@yahoo.com', 'a1e74fa7235fb978548cc2da73e055d3b27ecb4a448f308f403536e406541b86', '1988-03-12', 'Regio', 'HR', 'HR Chief', 'Romania', 'Bucharest');
call ADD_PERSON('Cescu', 'Catalina', '0799-234-188', 'ccatalin@yahoo.com', 'd4c72b49e7f3c13dca3d18dd9bf0170e92394860f3d5947be76a5cf9fadf84e6', '1989-11-04', 'Regio', 'Sales', 'SEO', 'France', 'Paris');
call ADD_PERSON('Ceausu', 'Mihnea', '0714-222-345', 'mceausu@gmail.com', 'c80c791f910335a344b9a7d827cca00af6ddb59d416f928907e7179dff182868', '1996-12-03', 'MichaMich', 'Sales', 'SEO', 'Spain', 'Barcelona');
call ADD_PERSON('Dodo', 'Adelina', '0749-299-999', 'dadelina@yahoo.com', '35ac869c65fcd31a92e2340cfa254a0ed6cb325d0ca43aaae110e757a5ea793e', '1986-06-24', 'FlowerPot', 'HR', 'Personal', 'Romania', 'Timisoara');
call ADD_PERSON('Cosma', 'Catrina', '0788-149-227', 'ccatrina@gmail.com', '8e1e14755e7651183916f5400a935688345413f1a9b02879aed68ac45a82732e', '1955-01-01', 'BricoHouse', 'Sales', 'Shop Assistant', 'Romania', 'Constanta');
call ADD_MSG('dadelina@yahoo.com', 'mihai.popescu@yahoo.com', 'Hello! Pe la munca. Tu?');
